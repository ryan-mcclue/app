// SPDX-License-Identifier: zlib-acknowledgement
#include <stdarg.h>
#include <stdint.h>
#include <stddef.h>
#include <setjmp.h>
#include <limits.h>

#include "app.cpp"

EXPORT_BEGIN
#include <cmocka.h>
EXPORT_END


void
test_fft(void **state)
{
  /*
  import random
  s = "{\n"
  t = 1 << 10
  rows = t // 16
  for i in range(rows):
    for j in range(16):
      v = random.random()
      s += f"{v:.2f}f, "
    s += "\n"
  s += "\n}"
  print(s)
  */
#define TEST_SIZE (1 << 10)
  f32 fft_test_samples[TEST_SIZE] =
  {
    0.09f, 0.87f, 0.04f, 0.57f, 0.20f, 0.48f, 0.72f, 0.35f, 0.89f, 0.79f, 0.44f, 0.69f, 0.25f, 0.94f, 0.03f, 1.00f, 
    0.33f, 0.69f, 0.69f, 0.26f, 0.85f, 0.32f, 0.69f, 0.67f, 0.98f, 0.76f, 0.11f, 0.64f, 0.73f, 0.67f, 0.37f, 0.15f, 
    0.93f, 0.24f, 0.91f, 0.36f, 0.32f, 0.54f, 0.19f, 0.99f, 0.97f, 0.20f, 0.24f, 0.63f, 0.00f, 0.03f, 0.48f, 0.16f, 
    0.11f, 0.36f, 0.64f, 0.60f, 0.71f, 0.08f, 0.92f, 0.48f, 0.08f, 0.19f, 0.83f, 0.86f, 0.65f, 0.47f, 0.99f, 0.48f, 
    0.93f, 0.43f, 0.38f, 0.23f, 0.43f, 0.07f, 0.28f, 0.52f, 0.03f, 0.24f, 0.47f, 0.74f, 0.48f, 0.03f, 0.01f, 0.29f, 
    0.53f, 0.29f, 0.28f, 0.24f, 0.88f, 0.77f, 0.86f, 0.43f, 0.58f, 0.75f, 0.95f, 0.01f, 0.24f, 1.00f, 0.43f, 0.61f, 
    0.31f, 0.01f, 0.38f, 0.66f, 0.17f, 0.92f, 0.71f, 0.15f, 0.45f, 0.03f, 0.38f, 0.81f, 0.69f, 0.00f, 0.81f, 0.13f, 
    0.48f, 0.99f, 0.38f, 0.41f, 0.95f, 0.99f, 0.70f, 0.88f, 0.85f, 0.45f, 0.31f, 0.79f, 0.51f, 0.07f, 0.24f, 0.65f, 
    0.33f, 0.96f, 0.99f, 0.59f, 0.36f, 0.54f, 0.05f, 0.78f, 0.93f, 0.83f, 0.61f, 0.31f, 0.46f, 0.77f, 0.46f, 0.47f, 
    0.78f, 0.17f, 0.46f, 0.41f, 0.06f, 0.85f, 0.14f, 0.17f, 0.01f, 0.06f, 0.70f, 0.01f, 0.51f, 0.59f, 0.52f, 0.30f, 
    0.79f, 0.07f, 0.20f, 0.19f, 0.47f, 0.95f, 0.14f, 0.17f, 0.51f, 0.78f, 0.94f, 0.08f, 0.32f, 0.77f, 0.75f, 0.72f, 
    0.45f, 0.30f, 0.67f, 0.59f, 0.16f, 0.81f, 0.30f, 0.52f, 0.12f, 0.57f, 0.18f, 0.69f, 0.93f, 0.47f, 0.94f, 0.89f, 
    0.98f, 0.57f, 0.81f, 0.09f, 0.70f, 0.13f, 0.85f, 0.59f, 0.65f, 0.89f, 0.38f, 0.76f, 0.19f, 0.71f, 0.88f, 0.54f, 
    0.66f, 0.70f, 0.95f, 0.11f, 0.94f, 0.70f, 0.36f, 0.55f, 0.06f, 0.47f, 0.04f, 0.07f, 0.19f, 0.08f, 0.33f, 0.78f, 
    0.58f, 0.37f, 0.20f, 0.66f, 0.79f, 0.69f, 0.84f, 0.87f, 0.01f, 0.32f, 0.29f, 0.26f, 0.46f, 0.69f, 0.45f, 0.50f, 
    0.20f, 0.60f, 0.05f, 0.81f, 0.16f, 0.43f, 0.42f, 0.10f, 0.69f, 0.69f, 0.98f, 0.68f, 0.76f, 0.16f, 0.50f, 0.58f, 
    0.92f, 0.93f, 0.50f, 0.52f, 0.02f, 0.78f, 0.24f, 0.94f, 0.70f, 0.04f, 0.57f, 0.95f, 0.23f, 0.53f, 0.90f, 0.09f, 
    0.35f, 0.26f, 0.45f, 0.63f, 0.13f, 0.33f, 0.01f, 0.47f, 0.41f, 0.71f, 0.79f, 0.42f, 0.27f, 0.56f, 0.59f, 0.57f, 
    0.02f, 0.78f, 0.76f, 0.96f, 0.32f, 0.98f, 0.50f, 0.69f, 0.36f, 0.38f, 0.72f, 0.88f, 0.79f, 0.31f, 0.89f, 0.08f, 
    0.75f, 0.98f, 0.68f, 0.00f, 0.19f, 0.50f, 0.82f, 0.79f, 0.48f, 0.29f, 0.17f, 0.87f, 0.82f, 0.84f, 0.75f, 0.09f, 
    0.99f, 0.87f, 0.37f, 0.08f, 0.10f, 0.65f, 0.46f, 0.20f, 0.76f, 0.33f, 0.65f, 0.15f, 0.12f, 0.34f, 0.27f, 0.58f, 
    0.54f, 0.81f, 0.52f, 0.28f, 0.54f, 0.71f, 0.60f, 0.24f, 0.81f, 0.96f, 0.57f, 0.99f, 0.02f, 0.02f, 0.44f, 0.81f, 
    0.78f, 0.51f, 0.01f, 0.78f, 0.16f, 0.26f, 0.78f, 0.76f, 0.60f, 0.19f, 0.78f, 0.24f, 0.70f, 0.80f, 0.43f, 0.13f, 
    0.52f, 0.79f, 0.49f, 0.06f, 0.71f, 0.76f, 0.13f, 0.97f, 0.22f, 0.71f, 0.67f, 0.18f, 0.24f, 0.67f, 0.54f, 0.04f, 
    0.51f, 0.59f, 0.46f, 0.19f, 0.45f, 0.64f, 0.95f, 0.98f, 0.91f, 0.14f, 0.40f, 0.87f, 0.38f, 0.07f, 0.11f, 0.98f, 
    0.56f, 0.84f, 0.59f, 0.36f, 0.75f, 0.70f, 0.44f, 0.63f, 0.60f, 0.04f, 0.49f, 0.25f, 0.88f, 0.44f, 0.43f, 0.86f, 
    0.85f, 0.37f, 0.45f, 0.15f, 0.81f, 0.93f, 0.40f, 0.13f, 0.91f, 0.50f, 0.47f, 0.78f, 0.01f, 0.90f, 0.92f, 0.24f, 
    0.06f, 0.97f, 0.00f, 0.99f, 0.78f, 0.04f, 0.00f, 0.37f, 0.11f, 0.58f, 0.24f, 0.54f, 0.75f, 0.23f, 0.72f, 0.86f, 
    0.02f, 0.21f, 0.80f, 0.29f, 0.65f, 0.40f, 0.05f, 0.31f, 0.68f, 0.31f, 0.36f, 0.37f, 0.60f, 0.23f, 0.51f, 0.59f, 
    0.73f, 0.56f, 0.58f, 0.53f, 0.22f, 0.09f, 0.28f, 0.14f, 0.55f, 0.17f, 0.27f, 0.75f, 0.48f, 0.94f, 0.57f, 0.85f, 
    0.33f, 0.94f, 0.21f, 0.11f, 0.72f, 0.49f, 0.91f, 0.13f, 0.90f, 0.91f, 0.24f, 0.78f, 0.56f, 0.80f, 0.65f, 0.41f, 
    0.16f, 0.35f, 0.43f, 0.53f, 0.98f, 0.57f, 0.39f, 0.96f, 0.87f, 0.93f, 0.64f, 0.02f, 0.52f, 0.44f, 0.80f, 0.40f, 
    0.13f, 0.16f, 0.20f, 0.37f, 0.13f, 0.59f, 0.39f, 0.62f, 0.04f, 0.51f, 0.82f, 0.33f, 0.95f, 0.45f, 0.57f, 0.05f, 
    0.02f, 0.53f, 0.77f, 0.12f, 0.84f, 0.51f, 0.60f, 0.91f, 0.63f, 0.84f, 0.29f, 0.14f, 0.52f, 0.64f, 0.91f, 0.57f, 
    0.91f, 0.36f, 0.39f, 0.18f, 0.35f, 0.30f, 0.06f, 0.14f, 0.82f, 0.78f, 0.60f, 0.45f, 0.98f, 0.21f, 0.04f, 0.06f, 
    0.41f, 0.24f, 0.49f, 0.70f, 0.35f, 0.83f, 0.92f, 0.16f, 0.55f, 0.33f, 0.72f, 0.45f, 0.57f, 0.57f, 0.91f, 0.02f, 
    0.56f, 0.21f, 0.65f, 0.83f, 0.37f, 0.04f, 0.01f, 0.75f, 0.72f, 0.43f, 0.49f, 0.23f, 0.39f, 0.56f, 0.34f, 0.83f, 
    0.82f, 0.49f, 0.89f, 0.75f, 0.65f, 0.24f, 0.99f, 0.59f, 0.17f, 0.78f, 0.50f, 0.35f, 0.02f, 0.27f, 0.63f, 0.86f, 
    0.75f, 0.01f, 0.71f, 0.46f, 0.83f, 0.30f, 0.12f, 0.54f, 0.97f, 0.73f, 0.66f, 0.76f, 0.37f, 0.34f, 0.55f, 0.57f, 
    0.61f, 0.16f, 0.19f, 0.79f, 0.55f, 0.90f, 0.50f, 0.65f, 0.33f, 0.75f, 0.26f, 0.42f, 0.57f, 0.59f, 0.10f, 0.86f, 
    0.67f, 0.91f, 0.21f, 0.16f, 0.01f, 0.50f, 0.56f, 0.81f, 0.73f, 0.82f, 0.97f, 0.81f, 0.35f, 0.17f, 0.55f, 0.84f, 
    0.33f, 0.68f, 0.13f, 0.42f, 0.36f, 0.28f, 0.68f, 0.78f, 0.73f, 0.44f, 0.60f, 0.85f, 0.09f, 0.76f, 0.00f, 0.76f, 
    0.56f, 0.87f, 0.61f, 0.05f, 0.89f, 0.26f, 0.30f, 0.24f, 0.35f, 0.41f, 0.99f, 0.30f, 0.67f, 0.89f, 0.37f, 0.72f, 
    0.57f, 0.05f, 0.01f, 0.96f, 0.60f, 0.45f, 0.67f, 0.14f, 0.63f, 0.91f, 0.88f, 0.70f, 0.03f, 0.12f, 0.54f, 0.21f, 
    0.81f, 0.76f, 0.94f, 1.00f, 0.81f, 0.08f, 0.41f, 0.04f, 0.58f, 0.47f, 0.40f, 0.88f, 0.79f, 0.58f, 0.23f, 0.76f, 
    0.01f, 0.46f, 0.32f, 0.64f, 0.97f, 0.62f, 0.64f, 0.22f, 0.34f, 0.48f, 0.28f, 0.17f, 0.84f, 0.49f, 0.80f, 0.72f, 
    0.82f, 0.64f, 0.33f, 0.30f, 0.36f, 0.21f, 0.70f, 0.18f, 0.87f, 0.87f, 0.75f, 0.82f, 0.45f, 0.16f, 0.20f, 0.74f, 
    0.85f, 0.31f, 0.85f, 0.32f, 0.38f, 0.13f, 0.69f, 0.88f, 0.31f, 0.32f, 0.17f, 0.44f, 0.24f, 0.35f, 0.10f, 0.29f, 
    0.70f, 0.40f, 0.41f, 0.22f, 0.76f, 0.95f, 0.96f, 0.13f, 0.29f, 0.60f, 0.07f, 0.51f, 0.99f, 0.33f, 0.13f, 0.88f, 
    0.22f, 0.71f, 0.53f, 0.69f, 0.45f, 0.84f, 0.91f, 0.47f, 0.29f, 0.68f, 0.28f, 0.40f, 0.94f, 0.69f, 0.29f, 0.97f, 
    0.37f, 0.49f, 0.33f, 0.88f, 0.12f, 0.79f, 0.95f, 0.61f, 0.28f, 0.07f, 0.78f, 0.13f, 0.49f, 0.59f, 0.95f, 0.74f, 
    0.06f, 0.34f, 0.90f, 0.22f, 0.42f, 0.84f, 0.21f, 0.68f, 0.69f, 0.17f, 0.12f, 0.90f, 0.92f, 0.59f, 0.61f, 0.61f, 
    0.50f, 0.88f, 0.72f, 0.97f, 0.87f, 0.88f, 0.39f, 0.08f, 0.02f, 0.72f, 0.70f, 0.98f, 0.37f, 0.15f, 0.49f, 0.07f, 
    0.08f, 0.37f, 0.26f, 0.76f, 0.18f, 0.82f, 0.43f, 0.50f, 0.23f, 0.52f, 0.39f, 0.92f, 0.50f, 0.72f, 0.70f, 0.93f, 
    0.25f, 0.69f, 0.40f, 0.15f, 0.82f, 0.52f, 0.64f, 0.29f, 0.24f, 0.36f, 0.35f, 0.24f, 0.47f, 0.47f, 0.57f, 0.08f, 
    0.60f, 0.87f, 0.43f, 0.85f, 0.44f, 0.11f, 0.50f, 0.59f, 0.75f, 0.94f, 0.27f, 0.07f, 0.50f, 0.45f, 0.94f, 0.88f, 
    0.90f, 0.47f, 0.48f, 0.51f, 0.58f, 0.85f, 0.13f, 0.75f, 0.66f, 0.34f, 0.15f, 0.48f, 0.62f, 0.29f, 0.57f, 0.31f, 
    0.59f, 0.40f, 0.62f, 0.65f, 1.00f, 0.88f, 0.18f, 0.66f, 0.17f, 0.33f, 0.17f, 0.51f, 0.73f, 0.50f, 0.93f, 0.89f, 
    0.13f, 0.99f, 0.10f, 0.49f, 0.97f, 0.78f, 0.51f, 0.61f, 0.68f, 0.01f, 0.12f, 0.28f, 0.91f, 0.87f, 0.56f, 0.44f, 
    0.61f, 0.37f, 0.08f, 0.64f, 0.89f, 0.54f, 0.10f, 1.00f, 0.67f, 0.95f, 0.02f, 0.33f, 0.96f, 0.29f, 0.82f, 0.93f, 
    0.12f, 0.93f, 0.14f, 0.24f, 0.29f, 0.99f, 0.87f, 0.01f, 0.84f, 0.32f, 0.93f, 0.65f, 0.68f, 0.91f, 0.95f, 0.47f, 
    0.86f, 0.67f, 0.32f, 0.67f, 0.21f, 0.80f, 0.28f, 0.38f, 0.34f, 0.73f, 0.08f, 0.20f, 0.74f, 0.19f, 0.21f, 0.35f, 
    0.91f, 0.63f, 0.80f, 0.16f, 0.04f, 0.99f, 0.73f, 0.51f, 0.51f, 0.96f, 0.25f, 0.81f, 0.57f, 0.75f, 0.46f, 0.24f, 
    0.66f, 0.04f, 0.29f, 0.64f, 0.79f, 0.34f, 0.03f, 0.25f, 0.08f, 0.24f, 0.40f, 0.61f, 0.48f, 0.08f, 0.95f, 0.97f, 
  };
  f32z fft_test_out[TEST_SIZE];
  fft(fft_test_samples, 1, fft_test_out, TEST_SIZE);
}

int 
main(void)
{
	const struct CMUnitTest tests[] = {
    cmocka_unit_test(test_fft),
  };

  int cmocka_res = cmocka_run_group_tests(tests, NULL, NULL);

  return cmocka_res;
}
